# dist
start_time <- Sys.time()
print('dist')
d <- as.matrix(dist(data, method = 'minkowski', p = 1))
end_time <- Sys.time()
this_row <- c(this_row, as.numeric(end_time - start_time))
rm(d)
# stringdist
print('stringdist')
start_time <- Sys.time()
d <- string_dist_R(data)
end_time <- Sys.time()
this_row <- c(this_row, as.numeric(end_time - start_time))
rm(d)
# Dist
print('fast dist')
start_time <- Sys.time()
d <- Dist(data, method = 'minkowski', p = 1)
end_time <- Sys.time()
this_row <- c(this_row, as.numeric(end_time - start_time))
rm(d)
# python
start_time <- Sys.time()
print('python dist')
d <- dist_python(data)
end_time <- Sys.time()
this_row <- c(this_row, as.numeric(end_time - start_time))
rm(d)
distances_overall[as.character(this_dim), ] <- this_row
}
# plot
plot(dim_1, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of rows', ylab = 'execution time')
lines(dim_1, distances_overall[,2], type="l",col="green")
lines(dim_1, distances_overall[,3], type="l",col="blue")
lines(dim_1, distances_overall[,4], type="l",col="yellow")
title('Execution time comparison - constant num of columns, rows changing ')
legend('topright', legend = c('dist', 'stringdist', 'fast_dist', 'python_dist'), col = c('red','green', 'blue', 'yellow'), lty = 1)
# plot
plot(dim_1, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of rows', ylab = 'execution time')
lines(dim_1, distances_overall[,2], type="l",col="green")
lines(dim_1, distances_overall[,3], type="l",col="blue")
lines(dim_1, distances_overall[,4], type="l",col="yellow")
title('Execution time comparison - constant num of columns, rows changing ')
legend('topright', legend = c('dist', 'stringdist', 'fast_dist', 'python_dist'), col = c('red','green', 'blue', 'yellow'), lty = 1)
# plot
plot(dim_1, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of rows', ylab = 'execution time')
distances_overall
this_row
# Clear
cat("\014")
rm(list = ls())
# libraries
library(stringdist)
library(Rfast)
library(reticulate)
library(parallel)
library(png)
use_python("/home/togkousa/Anaconda3/envs/r-reticulate/python.exe")
source_python('1_Kselection-tool/dist.py')
# string dist function
string_dist_R <- function(X){
convert_to_char <- function(X){
one.run <- function(i){
paste(as.character(X[i,]), collapse = '')
}
unlist(mclapply(c(1:nrow(X)), one.run, mc.cores = 4 ))
}
s <- convert_to_char(X)
D <- stringdistmatrix(s, s, 'hamming', nthread = 4)
rownames(D) <- rownames(X)
colnames(D) <- rownames(X)
return(D)
}
dim_1 <- c(100, 200, 300, 500, 1000, 2000)
dim_2 <- 1000
distances_overall <- matrix(0L, nrow = length(dim_1), ncol = 4)
colnames(distances_overall) <- c("dist", "stringdist", "Dist-Rfast", "python_dist")
rownames(distances_overall) <- dim_1
for (this_dim in dim_1){
print(paste0('Analysis for nrows =  ', this_dim))
this_row <- c()
# create data matrix
data <- matrix(sample.int(3, size = this_dim*dim_2, replace = TRUE)-1, nrow = this_dim, ncol = dim_2)
# dist
start_time <- Sys.time()
print('dist')
d <- as.matrix(dist(data, method = 'minkowski', p = 1))
end_time <- Sys.time()
this_row <- c(this_row, as.numeric(end_time - start_time))
rm(d)
# stringdist
print('stringdist')
start_time <- Sys.time()
d <- string_dist_R(data)
end_time <- Sys.time()
this_row <- c(this_row, as.numeric(end_time - start_time))
rm(d)
# Dist
print('fast dist')
start_time <- Sys.time()
d <- Dist(data, method = 'minkowski', p = 1)
end_time <- Sys.time()
this_row <- c(this_row, as.numeric(end_time - start_time))
rm(d)
# python
start_time <- Sys.time()
print('python dist')
d <- dist_python(data)
end_time <- Sys.time()
this_row <- c(this_row, as.numeric(end_time - start_time))
rm(d)
distances_overall[as.character(this_dim), ] <- this_row
}
# plot
plot(dim_1, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of rows', ylab = 'execution time')
lines(dim_1, distances_overall[,2], type="l",col="green")
lines(dim_1, distances_overall[,3], type="l",col="blue")
lines(dim_1, distances_overall[,4], type="l",col="yellow")
title('Execution time comparison - constant num of columns, rows changing ')
legend('topright', legend = c('dist', 'stringdist', 'fast_dist', 'python_dist'), col = c('red','green', 'blue', 'yellow'), lty = 1)
# Clear
cat("\014")
rm(list = ls())
# libraries
library(stringdist)
library(Rfast)
library(reticulate)
library(parallel)
library(png)
use_python("/home/togkousa/Anaconda3/envs/r-reticulate/python.exe")
source_python('1_Kselection-tool/dist.py')
# string dist function
string_dist_R <- function(X){
convert_to_char <- function(X){
one.run <- function(i){
paste(as.character(X[i,]), collapse = '')
}
unlist(mclapply(c(1:nrow(X)), one.run, mc.cores = 4 ))
}
s <- convert_to_char(X)
D <- stringdistmatrix(s, s, 'hamming', nthread = 4)
rownames(D) <- rownames(X)
colnames(D) <- rownames(X)
return(D)
}
dim_1 <- c(100, 200, 300, 500, 1000, 2000)
dim_2 <- 1000
distances_overall <- matrix(0L, nrow = length(dim_1), ncol = 4)
colnames(distances_overall) <- c("dist", "stringdist", "Dist-Rfast", "python_dist")
rownames(distances_overall) <- dim_1
for (this_dim in dim_1){
print(paste0('Analysis for nrows =  ', this_dim))
this_row <- c()
# create data matrix
data <- matrix(sample.int(3, size = this_dim*dim_2, replace = TRUE)-1, nrow = this_dim, ncol = dim_2)
# dist
start_time <- Sys.time()
print('dist')
d <- as.matrix(dist(data, method = 'minkowski', p = 1))
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# stringdist
print('stringdist')
start_time <- Sys.time()
d <- string_dist_R(data)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# Dist
print('fast dist')
start_time <- Sys.time()
d <- Dist(data, method = 'minkowski', p = 1)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# python
start_time <- Sys.time()
print('python dist')
d <- dist_python(data)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
distances_overall[as.character(this_dim), ] <- this_row
}
# plot
plot(dim_1, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of rows', ylab = 'execution time')
lines(dim_1, distances_overall[,2], type="l",col="green")
lines(dim_1, distances_overall[,3], type="l",col="blue")
lines(dim_1, distances_overall[,4], type="l",col="yellow")
title('Execution time comparison - constant num of columns, rows changing ')
legend('topright', legend = c('dist', 'stringdist', 'fast_dist', 'python_dist'), col = c('red','green', 'blue', 'yellow'), lty = 1)
plot(dim_1, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of rows', ylab = 'execution time')
lines(dim_1, distances_overall[,2], type="l",col="green")
lines(dim_1, distances_overall[,3], type="l",col="blue")
lines(dim_1, distances_overall[,4], type="l",col="yellow")
title('Execution time comparison - constant num of columns, num of rows changing ')
legend('topright', legend = c('dist', 'stringdist', 'fast_dist', 'python_dist'), col = c('red','green', 'blue', 'yellow'), lty = 1)
# plot
png('rows_changing.png', width = 1200, height = 800)
plot(dim_1, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of rows', ylab = 'execution time')
lines(dim_1, distances_overall[,2], type="l",col="green")
lines(dim_1, distances_overall[,3], type="l",col="blue")
lines(dim_1, distances_overall[,4], type="l",col="yellow")
title('Execution time comparison - constant num of columns, num of rows changing ')
legend('topright', legend = c('dist', 'stringdist', 'fast_dist', 'python_dist'), col = c('red','green', 'blue', 'yellow'), lty = 1)
dev.off()
dev.off()
# plot
png('rows_changing.png', width = 1200, height = 800)
plot(dim_1, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of rows', ylab = 'execution time')
lines(dim_1, distances_overall[,2], type="l",col="green")
lines(dim_1, distances_overall[,3], type="l",col="blue")
lines(dim_1, distances_overall[,4], type="l",col="yellow")
title('Execution time comparison - constant num of columns, num of rows changing ')
legend('topright', legend = c('dist', 'stringdist', 'fast_dist', 'python_dist'), col = c('red','green', 'blue', 'yellow'), lty = 1)
dev.off()
############# Constant rows, Cols changing #####################################
dim_2 <- c(100, 200, 300, 500, 1000, 2000)
dim_1 <- 1000
distances_overall <- matrix(0L, nrow = length(dim_1), ncol = 4)
colnames(distances_overall) <- c("dist", "stringdist", "Dist-Rfast", "python_dist")
rownames(distances_overall) <- dim_1
for (this_dim in dim_2){
print(paste0('Analysis for nrows =  ', this_dim))
this_row <- c()
# create data matrix
data <- matrix(sample.int(3, size = dim_1*this_dim, replace = TRUE)-1, nrow = dim_1, ncol = this_dim)
# dist
start_time <- Sys.time()
print('dist')
d <- as.matrix(dist(data, method = 'minkowski', p = 1))
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# stringdist
print('stringdist')
start_time <- Sys.time()
d <- string_dist_R(data)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# Dist
print('fast dist')
start_time <- Sys.time()
d <- Dist(data, method = 'minkowski', p = 1)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# python
start_time <- Sys.time()
print('python dist')
d <- dist_python(data)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
distances_overall[as.character(this_dim), ] <- this_row
}
# plot
png('cols_changing.png', width = 1200, height = 800)
plot(dim_2, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of cols', ylab = 'execution time')
lines(dim_2, distances_overall[,2], type="l",col="green")
lines(dim_2, distances_overall[,3], type="l",col="blue")
lines(dim_2, distances_overall[,4], type="l",col="yellow")
title('Execution time comparison - constant num of rows, num of cols changing ')
legend('topright', legend = c('dist', 'stringdist', 'fast_dist', 'python_dist'), col = c('red','green', 'blue', 'yellow'), lty = 1)
dev.off()
############# Constant rows, Cols changing #####################################
dim_2 <- c(100, 200, 300, 500, 1000, 2000)
dim_1 <- 1000
distances_overall <- matrix(0L, nrow = length(dim_1), ncol = 4)
colnames(distances_overall) <- c("dist", "stringdist", "Dist-Rfast", "python_dist")
rownames(distances_overall) <- dim_2
for (this_dim in dim_2){
print(paste0('Analysis for nrows =  ', this_dim))
this_row <- c()
# create data matrix
data <- matrix(sample.int(3, size = dim_1*this_dim, replace = TRUE)-1, nrow = dim_1, ncol = this_dim)
# dist
start_time <- Sys.time()
print('dist')
d <- as.matrix(dist(data, method = 'minkowski', p = 1))
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# stringdist
print('stringdist')
start_time <- Sys.time()
d <- string_dist_R(data)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# Dist
print('fast dist')
start_time <- Sys.time()
d <- Dist(data, method = 'minkowski', p = 1)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# python
start_time <- Sys.time()
print('python dist')
d <- dist_python(data)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
distances_overall[as.character(this_dim), ] <- this_row
}
# plot
png('cols_changing.png', width = 1200, height = 800)
plot(dim_2, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of cols', ylab = 'execution time')
lines(dim_2, distances_overall[,2], type="l",col="green")
lines(dim_2, distances_overall[,3], type="l",col="blue")
lines(dim_2, distances_overall[,4], type="l",col="yellow")
title('Execution time comparison - constant num of rows, num of cols changing ')
legend('topright', legend = c('dist', 'stringdist', 'fast_dist', 'python_dist'), col = c('red','green', 'blue', 'yellow'), lty = 1)
dev.off()
############# Constant rows, Cols changing #####################################
dim_2 <- c(100, 200, 300, 500, 1000, 2000)
dim_1 <- 1000
distances_overall <- matrix(0L, nrow = length(dim_2), ncol = 4)
colnames(distances_overall) <- c("dist", "stringdist", "Dist-Rfast", "python_dist")
rownames(distances_overall) <- dim_2
for (this_dim in dim_2){
print(paste0('Analysis for nrows =  ', this_dim))
this_row <- c()
# create data matrix
data <- matrix(sample.int(3, size = dim_1*this_dim, replace = TRUE)-1, nrow = dim_1, ncol = this_dim)
dim(data)
# dist
start_time <- Sys.time()
print('dist')
d <- as.matrix(dist(data, method = 'minkowski', p = 1))
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# stringdist
print('stringdist')
start_time <- Sys.time()
d <- string_dist_R(data)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# Dist
print('fast dist')
start_time <- Sys.time()
d <- Dist(data, method = 'minkowski', p = 1)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
# python
start_time <- Sys.time()
print('python dist')
d <- dist_python(data)
end_time <- Sys.time()
diff_time <- as.numeric(end_time - start_time)
print(diff_time)
this_row <- c(this_row, diff_time)
rm(d)
distances_overall[as.character(this_dim), ] <- this_row
}
# plot
png('cols_changing.png', width = 1200, height = 800)
plot(dim_2, distances_overall[,1], type="l",col="red", ylim = c(0, max(distances_overall) + 0.5),
xlab = 'Number of cols', ylab = 'execution time')
lines(dim_2, distances_overall[,2], type="l",col="green")
lines(dim_2, distances_overall[,3], type="l",col="blue")
lines(dim_2, distances_overall[,4], type="l",col="yellow")
title('Execution time comparison - constant num of rows, num of cols changing ')
legend('topright', legend = c('dist', 'stringdist', 'fast_dist', 'python_dist'), col = c('red','green', 'blue', 'yellow'), lty = 1)
dev.off()
# Clear
cat("\014")
rm(list = ls())
# libraries
library(stringr)
library(parallel)
library(gtools)
library(dplyr)
library(data.table)
library(stats)
library(cluster)
# library(reticulate)
library(stringdist)
library(Rfast)
# use_python("/home/togkousa/Anaconda3/envs/r-reticulate/python.exe")
# for server
# use_python("/home/user/anaconda3/envs/togkou_1/bin/python.exe")
# source_python('1_Kselection-tool/dist.py')
# detectedCores <- parallel::detectCores()
# registerDoParallel(cores=detectedCores-1)
######################### FUNTIONS #############################################
count_kmers_in_seq <- function(seq, k, seq_name){
one.run <- function(i) {
substr(seq, start = i, stop = i+k - 1)
}
out <- lapply(c(1:(nchar(seq)-k+1)), one.run)
kmers_row <- plyr::count(unlist(out))
kmers_row_mat <- matrix(kmers_row$freq,
nrow = 1,
ncol = nrow(kmers_row),
dimnames = list(c(seq_name), kmers_row$x))
kmers_row_mat <- as.data.frame(kmers_row_mat)
return(kmers_row_mat)
}
count_kmers_in_file <- function(sequences, k, seq_names){
count.kmers <- function(i){
count_kmers_in_seq(sequences[i], k, seq_names[i])
}
out <- mclapply(c(1:length(sequences)), count.kmers, mc.cores = 8)
kmerMatrix <- as.matrix(rbindlist(out, fill = T))
kmerMatrix[which(is.na(kmerMatrix), arr.ind = T)] <- 0
rownames(kmerMatrix) <- seq_names
return(kmerMatrix)
}
pairwise_distances <- function(X){
convert_to_char <- function(X){
one.run <- function(i){
paste(as.character(X[i,]), collapse = '')
}
unlist(mclapply(c(1:nrow(X)), one.run, mc.cores = 4 ))
}
s <- convert_to_char(X)
D <- stringdistmatrix(s, s, 'hamming', nthread = 4)
rownames(D) <- rownames(X)
colnames(D) <- rownames(X)
return(D)
}
###################### ANALYSIS ################################################
# input files
taxa_file <- read.csv('emp-data-loc/emp-taxonomy-train-test-loc.csv')
# taxa
taxa <- c('kingdom', 'phylum', 'class', 'order')
# values of k
kvals <- c(4:10)
# sequences, seqnames
sequences <- taxa_file$sequence
seq_names <- taxa_file$ID
# initialization
silh_scores_matrix <- matrix(0L, nrow = length(kvals), ncol = length(taxa))
rownames(silh_scores_matrix) <- kvals
colnames(silh_scores_matrix) <- taxa
# Analysis
for (k in kvals){
print(paste0("Analysis for k = ", k))
kmerMatrix <- count_kmers_in_file(sequences = sequences, seq_names = seq_names, k = k)
print('Kmer matrix created')
# calculate pairwise distances
# D <-  as.matrix(dist(kmerMatrix, method = 'minkowski', p = 1))
# D <- pairwise_distances(kmerMatrix)
D <- Dist(kmerMatrix, method = 'minkowski', p = 1)
print('Distance matrix calculated')
rm(kmerMatrix)
silh_row <- c()
for (tax in taxa){
print(paste0('Taxa: ', tax))
targets <- taxa_file[,tax]
to_drop <- which(targets == 'Unassigned')
if(length(to_drop)>0){
t <- factor(targets[-to_drop])
s <- silhouette(as.numeric(t), D[-to_drop, -to_drop])
silh_row <- c(silh_row, mean(s[,3]))
} else {
t <- factor(targets)
s <- silhouette(as.numeric(t), D)
silh_row <- c(silh_row, mean(s[,3]))
}
}
silh_scores_matrix[as.character(k),] <- silh_row
rm(silh_row, targets, D)
}
write.csv(silh_scores_matrix, file = 'silh.csv')
