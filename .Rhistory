points_matrix
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(c(sample_size), c(times_in_mins), ncol = 2, nrow = length(sample_size))
points_matrix
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
points_matrix
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='red', type = 'l', lty = 3)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='green', type = 'l', lty = 4)
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='red', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='green', type = 'l', lty = 2, lwd = 2)
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='red', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='green', type = 'l', lty = 2, lwd = 3)
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='red', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='green', type = 'l', lty = 2, lwd = 3, cex = 0.5)
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 3)
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(15, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins", width = 5, height = 4)
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins", width = 5, height = 4)
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins", width = 6, height = 4)
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
dev.new(width=5, height=4, unit="in")
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
dev.new(width=10, height=8, unit="in")
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# Plot
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# Plot
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# Plot
png(filename = 'complexity-fit.png', width = 1000, height = 800)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
dev.off()
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# Plot
png(filename = 'complexity-fit.png', width = 1000, height = 800)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
dev.off()
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# Plot
png(filename = 'complexity-fit.png', width = 800, height = 600)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
dev.off()
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# omicron and omega
x <- seq(from = 1000, to = 1000000, by = 1000)
c1 <- 8e-5
c2 <- 4.5e-10
shift <- 10
shift_2 <- 30
wmega_x <- c1*x + shift
omicron_x <- c2*(x^2) + shift_2
# Plot
#png(filename = 'complexity-fit.png', width = 800, height = 600)
pdf('complexity-fit.pdf')
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
lines(x, wmega_x, col='darkmagenta', type = 'l', lty = 1, lwd = 2)
lines(x, omicron_x, col='darkorange', type = 'l', lty = 1, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit', 'Ω(m)', expression("O(" ~ m^2 ~ ")")),
col=c('blue', 'green',"red", 'darkmagenta', 'darkorange'), lwd=c(NA,1,2,2,2), lty=c(NA,1,2,1,1),
pch=c(19, NA, NA, NA, NA))
dev.off()
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# omicron and omega
x <- seq(from = 1000, to = 1000000, by = 1000)
c1 <- 8e-5
c2 <- 4.5e-10
shift <- 10
shift_2 <- 30
wmega_x <- c1*x + shift
omicron_x <- c2*(x^2) + shift_2
# Plot
#png(filename = 'complexity-fit.png', width = 800, height = 600)
pdf('complexity-fit.pdf')
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
lines(x, wmega_x, col='darkmagenta', type = 'l', lty = 1, lwd = 2)
lines(x, omicron_x, col='darkorange', type = 'l', lty = 1, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit', expression(paste(omega,"(m)", sep = '')), expression("O(" ~ m^2 ~ ")")),
col=c('blue', 'green',"red", 'darkmagenta', 'darkorange'), lwd=c(NA,1,2,2,2), lty=c(NA,1,2,1,1),
pch=c(19, NA, NA, NA, NA))
dev.off()
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# omicron and omega
x <- seq(from = 1000, to = 1000000, by = 1000)
c1 <- 8e-5
c2 <- 4.5e-10
shift <- 10
shift_2 <- 30
wmega_x <- c1*x + shift
omicron_x <- c2*(x^2) + shift_2
# Plot
#png(filename = 'complexity-fit.png', width = 800, height = 600)
pdf('complexity-fit.pdf')
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
lines(x, wmega_x, col='darkmagenta', type = 'l', lty = 1, lwd = 2)
lines(x, omicron_x, col='darkorange', type = 'l', lty = 1, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit', expression(paste(Omega,"(m)", sep = '')), expression("O(" ~ m^2 ~ ")")),
col=c('blue', 'green',"red", 'darkmagenta', 'darkorange'), lwd=c(NA,1,2,2,2), lty=c(NA,1,2,1,1),
pch=c(19, NA, NA, NA, NA))
dev.off()
setwd("~/INEBwork/kmertaxonomyFF/kmerTaxonomyFF")
