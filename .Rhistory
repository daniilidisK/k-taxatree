cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins", width = 5, height = 4)
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins", width = 5, height = 4)
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins", width = 6, height = 4)
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
dev.new(width=5, height=4, unit="in")
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
dev.new(width=10, height=8, unit="in")
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# Plot
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# Plot
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# Plot
png(filename = 'complexity-fit.png', width = 1000, height = 800)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
dev.off()
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# Plot
png(filename = 'complexity-fit.png', width = 1000, height = 800)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
dev.off()
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Plot
#plot(sample_size, times_in_mins, type = "p", pch = 19, cex=0.5, col = "blue", xlab = "Sample size", ylab = "Time in mins")
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# Plot
png(filename = 'complexity-fit.png', width = 800, height = 600)
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit'), col=c('blue', 'green',"red"), lwd=c(NA,1,2), lty=c(NA,1,2),
pch=c(19, NA, NA))
dev.off()
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# omicron and omega
x <- seq(from = 1000, to = 1000000, by = 1000)
c1 <- 8e-5
c2 <- 4.5e-10
shift <- 10
shift_2 <- 30
wmega_x <- c1*x + shift
omicron_x <- c2*(x^2) + shift_2
# Plot
#png(filename = 'complexity-fit.png', width = 800, height = 600)
pdf('complexity-fit.pdf')
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
lines(x, wmega_x, col='darkmagenta', type = 'l', lty = 1, lwd = 2)
lines(x, omicron_x, col='darkorange', type = 'l', lty = 1, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit', 'Ω(m)', expression("O(" ~ m^2 ~ ")")),
col=c('blue', 'green',"red", 'darkmagenta', 'darkorange'), lwd=c(NA,1,2,2,2), lty=c(NA,1,2,1,1),
pch=c(19, NA, NA, NA, NA))
dev.off()
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# omicron and omega
x <- seq(from = 1000, to = 1000000, by = 1000)
c1 <- 8e-5
c2 <- 4.5e-10
shift <- 10
shift_2 <- 30
wmega_x <- c1*x + shift
omicron_x <- c2*(x^2) + shift_2
# Plot
#png(filename = 'complexity-fit.png', width = 800, height = 600)
pdf('complexity-fit.pdf')
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
lines(x, wmega_x, col='darkmagenta', type = 'l', lty = 1, lwd = 2)
lines(x, omicron_x, col='darkorange', type = 'l', lty = 1, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit', expression(paste(omega,"(m)", sep = '')), expression("O(" ~ m^2 ~ ")")),
col=c('blue', 'green',"red", 'darkmagenta', 'darkorange'), lwd=c(NA,1,2,2,2), lty=c(NA,1,2,1,1),
pch=c(19, NA, NA, NA, NA))
dev.off()
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
library(graphics)
sample_size <- c(1,2,5,10,20,50,100,150,200,250,300,350, 400,450,500,600,700,800,900,1000)*1000
times_in_mins <- c(5.63, 6.577, 8.896, 10.532, 12.105, 16.463, 30.262,38.466,50.3216,
60.2499,68.6131,62.6130,48.5396,48.7426, 79.051, 118.6706, 69.0767, 91.2764, 120.7617, 132.7900)
points_matrix <- matrix(cbind(sample_size, times_in_mins),  ncol = 2, nrow = length(sample_size))
# Fit
fit1 <- lm(times_in_mins ~ sample_size)
fit2 <- lm(times_in_mins ~ sample_size + sample_size^2)
# omicron and omega
x <- seq(from = 1000, to = 1000000, by = 1000)
c1 <- 8e-5
c2 <- 4.5e-10
shift <- 10
shift_2 <- 30
wmega_x <- c1*x + shift
omicron_x <- c2*(x^2) + shift_2
# Plot
#png(filename = 'complexity-fit.png', width = 800, height = 600)
pdf('complexity-fit.pdf')
plot( 0, type="n", xlim=c(1000,1000000), ylim=c(0,140),  xlab = "Sample size", ylab = "Time in mins")
title('Computation time with respect to sample size')
points(points_matrix, pch = 19, cex=0.5, col = "blue")
lines(sample_size, predict(fit1, data.frame(sample_size)), col='green', type = 'l', lty = 1, lwd=1)
lines(sample_size, predict(fit2, data.frame(sample_size)), col='red', type = 'l', lty = 2, lwd = 2)
lines(x, wmega_x, col='darkmagenta', type = 'l', lty = 1, lwd = 2)
lines(x, omicron_x, col='darkorange', type = 'l', lty = 1, lwd = 2)
legend('topleft', legend = c('Actual points', 'Linear fit', 'Quadratic fit', expression(paste(Omega,"(m)", sep = '')), expression("O(" ~ m^2 ~ ")")),
col=c('blue', 'green',"red", 'darkmagenta', 'darkorange'), lwd=c(NA,1,2,2,2), lty=c(NA,1,2,1,1),
pch=c(19, NA, NA, NA, NA))
dev.off()
setwd("~/INEBwork/kmertaxonomyFF/kmerTaxonomyFF")
# Clear
cat("\014")
rm(list = ls())
# libraries
library(kmer)
library(seqinr)
library(stringr)
library(parallel)
library(gtools)
library(dplyr)
library(data.table)
library(stats)
library(cluster)
library(parallelDist)
library(RcppParallel)
library(microbenchmark)
library(doParallel)
detectedCores <- parallel::detectCores()
registerDoParallel(cores=detectedCores-1)
######################### FUNTIONS #############################################
count_kmers_in_seq <- function(seq, k, seq_name){
one.run <- function(i) {
substr(seq, start = i, stop = i+k - 1)
}
out <- lapply(c(1:(nchar(seq)-k+1)), one.run)
kmers_row <- plyr::count(unlist(out))
kmers_row_mat <- matrix(kmers_row$freq,
nrow = 1,
ncol = nrow(kmers_row),
dimnames = list(c(seq_name), kmers_row$x))
kmers_row_mat <- as.data.frame(kmers_row_mat)
return(kmers_row_mat)
}
count_kmers_in_file <- function(sequences, k, seq_names){
count.kmers <- function(i){
count_kmers_in_seq(sequences[i], k, seq_names[i])
}
out <- mclapply(c(1:length(sequences)), count.kmers, mc.cores = 4)
kmerMatrix <- as.matrix(rbindlist(out, fill = T))
kmerMatrix[which(is.na(kmerMatrix), arr.ind = T)] <- 0
rownames(kmerMatrix) <- seq_names
return(kmerMatrix)
}
pairwise_distances <- function(X){
minkowski_dist <- function(a,b){
one.run <- function(i){
abs(a[i] - b[i])
}
parallelSum <- function(x) {
items <- length(x)
batches <- detectedCores * 4
batchSets <- split(x, rep(1:batches, length.out=items))
finalSum <- foreach(b=iter(batchSets, by='row'), .combine="+") %dopar% sum(b)
return (finalSum)
}
return(parallelSum(unlist(mclapply(c(1:length(a)), one.run, mc.cores = 4))))
#sum(unlist(mclapply(c(1:length(a)), one.run, mc.cores = 4)))
}
calculate_distances <- function(X, pos){
n <- nrow(X)
this_row <- X[pos, ]
one.run <- function(i){
minkowski_dist(this_row, X[i, ])
}
return(unlist(lapply(c((pos+1): n-1), one.run )))
}
D <- matrix(0L, nrow = nrow(X), ncol = nrow(X))
dim_D <- nrow(X)
for (j in 1:(dim_D - 1)){
row_dists <- calculate_distances(X, j)
D[(j+1):dim_D, j] <- row_dists
D[j,(j+1):dim_D] <- row_dists
}
return(D)
}
# input files
taxa_file <- read.csv('emp-data-loc/emp-taxonomy-train-test-loc.csv')
# taxa
taxa <- c('kingdom', 'phylum', 'class', 'order')
# values of k
kvals <- c(4:8)
# sequences, seqnames
sequences <- taxa_file$sequence
seq_names <- taxa_file$ID
k = 3
k = 3
k = 4
kmerMatrix <- count_kmers_in_file(sequences = sequences, seq_names = seq_names, k = k)
X <- kmerMatrix
D<-pairwise_distances(X)
pairwise_distances <- function(X){
minkowski_dist <- function(a,b){
one.run <- function(i){
abs(a[i] - b[i])
}
parallelSum <- function(x) {
items <- length(x)
batches <- detectedCores * 4
batchSets <- split(x, rep(1:batches, length.out=items))
finalSum <- foreach(b=iter(batchSets, by='row'), .combine="+") %dopar% sum(b)
return (finalSum)
}
return(parallelSum(unlist(mclapply(c(1:length(a)), one.run, mc.cores = 4))))
#sum(unlist(mclapply(c(1:length(a)), one.run, mc.cores = 4)))
}
calculate_distances <- function(X, pos){
n <- nrow(X)
this_row <- X[pos, ]
one.run <- function(i){
minkowski_dist(this_row, X[i, ])
}
return(unlist(lapply(c((pos+1): n-1), one.run )))
}
D <- matrix(0L, nrow = nrow(X), ncol = nrow(X))
dim_D <- nrow(X)
for (j in 1:(dim_D - 1)){
print(paste0('Row ', j))
row_dists <- calculate_distances(X, j)
D[(j+1):dim_D, j] <- row_dists
D[j,(j+1):dim_D] <- row_dists
}
return(D)
}
D<-pairwise_distances(X)
a <- c(1,2,3,4)
b <- c(2,1,4,3)
abs(a-b)
parallelSum <- function(x) {
items <- length(x)
batches <- detectedCores * 4
batchSets <- split(x, rep(1:batches, length.out=items))
finalSum <- foreach(b=iter(batchSets, by='row'), .combine="+") %dopar% sum(b)
return (finalSum)
}
parallelSum(abs(a-b))
pairwise_distances <- function(X){
minkowski_dist <- function(a,b){
one.run <- function(i){
abs(a[i] - b[i])
}
parallelSum <- function(x) {
items <- length(x)
batches <- detectedCores * 4
batchSets <- split(x, rep(1:batches, length.out=items))
finalSum <- foreach(b=iter(batchSets, by='row'), .combine="+") %dopar% sum(b)
return (finalSum)
}
#return(parallelSum(unlist(mclapply(c(1:length(a)), one.run, mc.cores = 4))))
return(parallelSum(abs(a-b)))
#sum(unlist(mclapply(c(1:length(a)), one.run, mc.cores = 4)))
}
calculate_distances <- function(X, pos){
n <- nrow(X)
this_row <- X[pos, ]
one.run <- function(i){
minkowski_dist(this_row, X[i, ])
}
return(unlist(lapply(c((pos+1): n-1), one.run )))
}
D <- matrix(0L, nrow = nrow(X), ncol = nrow(X))
dim_D <- nrow(X)
for (j in 1:(dim_D - 1)){
print(paste0('Row ', j))
row_dists <- calculate_distances(X, j)
D[(j+1):dim_D, j] <- row_dists
D[j,(j+1):dim_D] <- row_dists
}
return(D)
}
D <- pairwise_distances(X)
dist(X)
D <- dist(X)
dim(D)
D[1,1]
D
D <- dist(X, diag = T)
d
D
